#region expressions

<primary-expression> ::= Identifier
    | IntegerConst
    | FloatConst
    | StringConst
    | '(' <expression> ')'

<postfix-expression> ::= <primary-expression>
    | <postfix-expression> '[' <expression> ']'
    | <postfix-expression> '(' <argument-expression-list>? ')'
    | <postfix-expression> '.' Identifier
    | <postfix-expression> '->' Identifier
    | <postfix-expression> '++'
    | <postfix-expression> '--'
    | '(' <type-name> ')' '{' <initializer-list> '}'
    | '(' <type-name> ')' '{' <initializer-list> ',' '}'

<argument-expression-list> ::= <assignment-expression>
    | <argument-expression-list> ',' <assignment-expression>

<unary-expression> ::= <postfix-expression>
    | '++' <unary-expression>
    | '--' <unary-expression>
    | <unary-operator> <cast-expression>
    | 'sizeof' <unary-expression>
    | 'sizeof' '(' <type-name> ')'

<unary-operator> ::= '&'
    | '*'
    | '+'
    | '-'
    | '~'
    | '!'

<cast-expression> ::= <unary-expression>
    | '(' <type-name> ')' <cast-expression>

<multiplicative-expression> ::= <cast-expression>
    | <multiplicative-expression> '*' <cast-expression>
    | <multiplicative-expression> '/' <cast-expression>
    | <multiplicative-expression> '%' <cast-expression>

<additive-expression> ::= <multiplicative-expression>
    | <additive-expression> '+' <multiplicative-expression>
    | <additive-expression> '-' <multiplicative-expression>

<shift-expression> ::= <additive-expression>
    | <shift-expression> '<<' <additive-expression>
    | <shift-expression> '>>' <additive-expression>

<relational-expression> ::= <shift-expression>
    | <relational-expression> '<' <shift-expression>
    | <relational-expression> '>' <shift-expression>
    | <relational-expression> '<=' <shift-expression>
    | <relational-expression> '>=' <shift-expression>

<equality-expression> ::= <relational-expression>
    | <equality-expression> '==' <relational-expression>
    | <equality-expression> '!=' <relational-expression>

<bitand-expression> ::= <equality-expression>
    | <bitand-expression> '&' <equality-expression>

<xor-expression> ::= <and-expression>
    | <xor-expression> '^' <bitand-expression>

<bitor-expression> ::= <xor-expression>
    | <bitor-expression> '|' <xor-expression>

<and-expression> ::= <bitor-expression>
    | <and-expression> '&&' <bitor-expression>

<or-expression> ::= <and-expression>
    | <or-expression> '||' <and-expression>

<conditional-expression> ::= <or-expression>
    | <or-expression> '?' <expression> ':' <conditional-expression>

<assignment-expression> ::= <conditional-expression>
    | <unary-expression> <assignment-operator> <assignment-expression>

<assignment-operator> ::= '='
    | '*='
    | '/='
    | '%='
    | '+='
    | '-='
    | '<<='
    | '>>='
    | '&='
    | '^='
    | '|='

<expression> ::= <assignment-expression>
    | <expression> ',' <assignment-expression>


#endregion

#region decl

#endregion

#region blocks

#endregion